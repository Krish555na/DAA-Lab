#include <stdio.h>
#define INF 99999
#define MAX_N 20 // Maximum value for N

void floydWarshall(int graph[100][100], int V) {
int dist[100][100];

	for (int i = 0; i < V; i++)
		for (int j = 0; j < V; j++)
		dist[i][j] = graph[i][j];

	for (int k = 0; k < V; k++) {
		for (int i = 0; i < V; i++) {
			for (int j = 0; j < V; j++) {
				if (dist[i][k] + dist[k][j] < dist[i][j])
					dist[i][j] = dist[i][k] + dist[k][j];
				}
	}
	}

	printf("The following matrix shows the shortest distances between all pairs of the vertices.\n");
	    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF)
                printf("%5s", "INF");
            else
                printf("%5d", dist[i][j]);
        }
        printf("\n");
    }
}

int main() {
	int V, E;
	int graph[100][100];

	printf("Enter the number of vertices : ");
	scanf("%d", &V);
	printf("Enter the number of edges : ");
	scanf("%d", &E);

	for (int i = 0; i < V; i++)
		for (int j = 0; j < V; j++)
			graph[i][j] = (i == j) ? 0 : INF;

	for (int i = 0; i < E; i++) {
        int u, v, w;
        printf("Enter source : ");
        scanf("%d", &u);
        printf("Enter destination : ");
        scanf("%d", &v);
        printf("Enter weight : ");
        scanf("%d", &w);
        graph[u - 1][v - 1] = w;  // Adjust for 0-based indexing
	}

	floydWarshall(graph, V);
	return 0;
}

